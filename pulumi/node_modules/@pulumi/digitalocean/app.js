"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean App resource.
 *
 * ## Example Usage
 *
 * To create an app, provide a [DigitalOcean app spec](https://www.digitalocean.com/docs/app-platform/references/app-specification-reference/) specifying the app's components.
 * ### Basic Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const golang_sample = new digitalocean.App("golang-sample", {
 *     spec: {
 *         name: "golang-sample",
 *         region: "ams",
 *         services: [{
 *             environmentSlug: "go",
 *             git: {
 *                 branch: "main",
 *                 repoCloneUrl: "https://github.com/digitalocean/sample-golang.git",
 *             },
 *             instanceCount: 1,
 *             instanceSizeSlug: "professional-xs",
 *             name: "go-service",
 *         }],
 *     },
 * });
 * ```
 * ### Static Site Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const static_ste_example = new digitalocean.App("static-ste-example", {
 *     spec: {
 *         name: "static-ste-example",
 *         region: "ams",
 *         staticSites: [{
 *             buildCommand: "bundle exec jekyll build -d ./public",
 *             git: {
 *                 branch: "main",
 *                 repoCloneUrl: "https://github.com/digitalocean/sample-jekyll.git",
 *             },
 *             name: "sample-jekyll",
 *             outputDir: "/public",
 *         }],
 *     },
 * });
 * ```
 * ### Multiple Components Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const mono_repo_example = new digitalocean.App("mono-repo-example", {
 *     spec: {
 *         databases: [{
 *             engine: "PG",
 *             name: "starter-db",
 *             production: false,
 *         }],
 *         domains: ["foo.example.com"],
 *         name: "mono-repo-example",
 *         region: "ams",
 *         // Build a Go project in the api/ directory that listens on port 3000
 *         // and serves it at https://foo.example.com/api
 *         services: [{
 *             environmentSlug: "go",
 *             github: {
 *                 branch: "main",
 *                 deployOnPush: true,
 *                 repo: "username/repo",
 *             },
 *             httpPort: 3000,
 *             instanceCount: 2,
 *             instanceSizeSlug: "professional-xs",
 *             name: "api",
 *             routes: {
 *                 path: "/api",
 *             },
 *             runCommand: "bin/api",
 *             sourceDir: "api/",
 *         }],
 *         // Builds a static site in the project's root directory
 *         // and serves it at https://foo.example.com/
 *         staticSites: [{
 *             buildCommand: "npm run build",
 *             github: {
 *                 branch: "main",
 *                 deployOnPush: true,
 *                 repo: "username/repo",
 *             },
 *             name: "web",
 *             routes: {
 *                 path: "/",
 *             },
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * An app can be imported using its `id`, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/app:App myapp fb06ad00-351f-45c8-b5eb-13523c438661
 * ```
 */
class App extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["activeDeploymentId"] = state ? state.activeDeploymentId : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["defaultIngress"] = state ? state.defaultIngress : undefined;
            inputs["liveUrl"] = state ? state.liveUrl : undefined;
            inputs["spec"] = state ? state.spec : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
        }
        else {
            const args = argsOrState;
            inputs["spec"] = args ? args.spec : undefined;
            inputs["activeDeploymentId"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["defaultIngress"] = undefined /*out*/;
            inputs["liveUrl"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(App.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing App resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new App(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of App.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === App.__pulumiType;
    }
}
exports.App = App;
/** @internal */
App.__pulumiType = 'digitalocean:index/app:App';
//# sourceMappingURL=app.js.map