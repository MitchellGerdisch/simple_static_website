"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean Certificate resource that allows you to manage
 * certificates for configuring TLS termination in Load Balancers.
 * Certificates created with this resource can be referenced in your
 * Load Balancer configuration via their ID. The certificate can either
 * be a custom one provided by you or automatically generated one with
 * Let's Encrypt.
 *
 * ## Example Usage
 * ### Custom Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 * import * from "fs";
 *
 * const cert = new digitalocean.Certificate("cert", {
 *     type: "custom",
 *     privateKey: fs.readFileSync("/Users/terraform/certs/privkey.pem"),
 *     leafCertificate: fs.readFileSync("/Users/terraform/certs/cert.pem"),
 *     certificateChain: fs.readFileSync("/Users/terraform/certs/fullchain.pem"),
 * });
 * ```
 * ### Let's Encrypt Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const cert = new digitalocean.Certificate("cert", {
 *     domains: ["example.com"],
 *     type: "lets_encrypt",
 * });
 * ```
 * ### Use with Other Resources
 *
 * Both custom and Let's Encrypt certificates can be used with other resources
 * including the `digitalocean.LoadBalancer` and `digitalocean.Cdn` resources.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const cert = new digitalocean.Certificate("cert", {
 *     type: "lets_encrypt",
 *     domains: ["example.com"],
 * });
 * // Create a new Load Balancer with TLS termination
 * const _public = new digitalocean.LoadBalancer("public", {
 *     region: "nyc3",
 *     dropletTag: "backend",
 *     forwardingRules: [{
 *         entryPort: 443,
 *         entryProtocol: "https",
 *         targetPort: 80,
 *         targetProtocol: "http",
 *         certificateName: cert.name,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Certificates can be imported using the certificate `name`, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/certificate:Certificate mycertificate cert-01
 * ```
 */
class Certificate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["certificateChain"] = state ? state.certificateChain : undefined;
            inputs["domains"] = state ? state.domains : undefined;
            inputs["leafCertificate"] = state ? state.leafCertificate : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notAfter"] = state ? state.notAfter : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["sha1Fingerprint"] = state ? state.sha1Fingerprint : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["uuid"] = state ? state.uuid : undefined;
        }
        else {
            const args = argsOrState;
            inputs["certificateChain"] = args ? args.certificateChain : undefined;
            inputs["domains"] = args ? args.domains : undefined;
            inputs["leafCertificate"] = args ? args.leafCertificate : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["privateKey"] = args ? args.privateKey : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["notAfter"] = undefined /*out*/;
            inputs["sha1Fingerprint"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["uuid"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Certificate.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Certificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }
}
exports.Certificate = Certificate;
/** @internal */
Certificate.__pulumiType = 'digitalocean:index/certificate:Certificate';
//# sourceMappingURL=certificate.js.map