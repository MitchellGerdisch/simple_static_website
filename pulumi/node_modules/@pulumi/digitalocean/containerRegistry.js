"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean Container Registry resource. A Container Registry is
 * a secure, private location to store your containers for rapid deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * // Create a new container registry
 * const foobar = new digitalocean.ContainerRegistry("foobar", {
 *     subscriptionTierSlug: "starter",
 * });
 * ```
 *
 * ## Import
 *
 * Container Registries can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/containerRegistry:ContainerRegistry myregistry registryname
 * ```
 */
class ContainerRegistry extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["serverUrl"] = state ? state.serverUrl : undefined;
            inputs["subscriptionTierSlug"] = state ? state.subscriptionTierSlug : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.subscriptionTierSlug === undefined) {
                throw new Error("Missing required property 'subscriptionTierSlug'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["subscriptionTierSlug"] = args ? args.subscriptionTierSlug : undefined;
            inputs["endpoint"] = undefined /*out*/;
            inputs["serverUrl"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ContainerRegistry.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ContainerRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ContainerRegistry(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ContainerRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerRegistry.__pulumiType;
    }
}
exports.ContainerRegistry = ContainerRegistry;
/** @internal */
ContainerRegistry.__pulumiType = 'digitalocean:index/containerRegistry:ContainerRegistry';
//# sourceMappingURL=containerRegistry.js.map