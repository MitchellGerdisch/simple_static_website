"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Get Docker credentials for your DigitalOcean container registry.
 *
 * An error is triggered if the provided container registry name does not exist.
 *
 * ## Example Usage
 * ### Basic Example
 *
 * Get the container registry:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = new digitalocean.ContainerRegistryDockerCredentials("example", {
 *     registryName: "example",
 * });
 * ```
 * ### Docker Provider Example
 *
 * Use the `endpoint` and `dockerCredentials` with the Docker provider:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const exampleContainerRegistry = digitalocean.getContainerRegistry({
 *     name: "example",
 * });
 * const exampleContainerRegistryDockerCredentials = new digitalocean.ContainerRegistryDockerCredentials("exampleContainerRegistryDockerCredentials", {registryName: "example"});
 * ```
 */
class ContainerRegistryDockerCredentials extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["credentialExpirationTime"] = state ? state.credentialExpirationTime : undefined;
            inputs["dockerCredentials"] = state ? state.dockerCredentials : undefined;
            inputs["expirySeconds"] = state ? state.expirySeconds : undefined;
            inputs["registryName"] = state ? state.registryName : undefined;
            inputs["write"] = state ? state.write : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.registryName === undefined) {
                throw new Error("Missing required property 'registryName'");
            }
            inputs["expirySeconds"] = args ? args.expirySeconds : undefined;
            inputs["registryName"] = args ? args.registryName : undefined;
            inputs["write"] = args ? args.write : undefined;
            inputs["credentialExpirationTime"] = undefined /*out*/;
            inputs["dockerCredentials"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ContainerRegistryDockerCredentials.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ContainerRegistryDockerCredentials resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ContainerRegistryDockerCredentials(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ContainerRegistryDockerCredentials.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerRegistryDockerCredentials.__pulumiType;
    }
}
exports.ContainerRegistryDockerCredentials = ContainerRegistryDockerCredentials;
/** @internal */
ContainerRegistryDockerCredentials.__pulumiType = 'digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials';
//# sourceMappingURL=containerRegistryDockerCredentials.js.map