"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a resource which can be used to create a [custom image](https://www.digitalocean.com/docs/images/custom-images/)
 * from a URL. The URL must point to an image in one of the following file formats:
 *
 * - Raw (.img) with an MBR or GPT partition table
 * - qcow2
 * - VHDX
 * - VDI
 * - VMDK
 *
 * The image may be compressed using gzip or bzip2. See the DigitalOcean Custom
 * Image documentation for [additional requirements](https://www.digitalocean.com/docs/images/custom-images/#image-requirements).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const flatcar = new digitalocean.CustomImage("flatcar", {
 *     url: "https://stable.release.flatcar-linux.net/amd64-usr/2605.7.0/flatcar_production_digitalocean_image.bin.bz2",
 *     regions: ["nyc3"],
 * });
 * const example = new digitalocean.Droplet("example", {
 *     image: flatcar.id,
 *     region: "nyc3",
 *     size: "s-1vcpu-1gb",
 *     sshKeys: [12345],
 * });
 * ```
 */
class CustomImage extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["distribution"] = state ? state.distribution : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["minDiskSize"] = state ? state.minDiskSize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["public"] = state ? state.public : undefined;
            inputs["regions"] = state ? state.regions : undefined;
            inputs["sizeGigabytes"] = state ? state.sizeGigabytes : undefined;
            inputs["slug"] = state ? state.slug : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["url"] = state ? state.url : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.regions === undefined) {
                throw new Error("Missing required property 'regions'");
            }
            if (!args || args.url === undefined) {
                throw new Error("Missing required property 'url'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["distribution"] = args ? args.distribution : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["regions"] = args ? args.regions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["url"] = args ? args.url : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["imageId"] = undefined /*out*/;
            inputs["minDiskSize"] = undefined /*out*/;
            inputs["public"] = undefined /*out*/;
            inputs["sizeGigabytes"] = undefined /*out*/;
            inputs["slug"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CustomImage.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CustomImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CustomImage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CustomImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomImage.__pulumiType;
    }
}
exports.CustomImage = CustomImage;
/** @internal */
CustomImage.__pulumiType = 'digitalocean:index/customImage:CustomImage';
//# sourceMappingURL=customImage.js.map