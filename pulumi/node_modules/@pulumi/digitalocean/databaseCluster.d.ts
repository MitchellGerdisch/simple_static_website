import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import { DatabaseSlug, Region } from "./index";
/**
 * Provides a DigitalOcean database cluster resource.
 *
 * ## Example Usage
 * ### Create a new PostgreSQL database cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const postgres_example = new digitalocean.DatabaseCluster("postgres-example", {
 *     engine: "pg",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 *     version: "11",
 * });
 * ```
 * ### Create a new MySQL database cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const mysql_example = new digitalocean.DatabaseCluster("mysql-example", {
 *     engine: "mysql",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 *     version: "8",
 * });
 * ```
 * ### Create a new Redis database cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const redis_example = new digitalocean.DatabaseCluster("redis-example", {
 *     engine: "redis",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 *     version: "6",
 * });
 * ```
 *
 * ## Import
 *
 * Database clusters can be imported using the `id` returned from DigitalOcean, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/databaseCluster:DatabaseCluster mycluster 245bcfd0-7f31-4ce6-a2bc-475a116cca97
 * ```
 */
export declare class DatabaseCluster extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseClusterState, opts?: pulumi.CustomResourceOptions): DatabaseCluster;
    /**
     * Returns true if the given object is an instance of DatabaseCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DatabaseCluster;
    /**
     * The uniform resource name of the database cluster.
     */
    readonly clusterUrn: pulumi.Output<string>;
    /**
     * Name of the cluster's default database.
     */
    readonly database: pulumi.Output<string>;
    /**
     * Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
     */
    readonly engine: pulumi.Output<string>;
    /**
     * A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
     */
    readonly evictionPolicy: pulumi.Output<string | undefined>;
    /**
     * Database cluster's hostname.
     */
    readonly host: pulumi.Output<string>;
    /**
     * Defines when the automatic maintenance should be performed for the database cluster.
     */
    readonly maintenanceWindows: pulumi.Output<outputs.DatabaseClusterMaintenanceWindow[] | undefined>;
    /**
     * The name of the database cluster.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Number of nodes that will be included in the cluster.
     */
    readonly nodeCount: pulumi.Output<number>;
    /**
     * Password for the cluster's default user.
     */
    readonly password: pulumi.Output<string>;
    /**
     * Network port that the database cluster is listening on.
     */
    readonly port: pulumi.Output<number>;
    /**
     * Same as `host`, but only accessible from resources within the account and in the same region.
     */
    readonly privateHost: pulumi.Output<string>;
    /**
     * The ID of the VPC where the database cluster will be located.
     */
    readonly privateNetworkUuid: pulumi.Output<string>;
    /**
     * Same as `uri`, but only accessible from resources within the account and in the same region.
     */
    readonly privateUri: pulumi.Output<string>;
    /**
     * DigitalOcean region where the cluster will reside.
     */
    readonly region: pulumi.Output<Region>;
    /**
     * Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://developers.digitalocean.com/documentation/v2/#databases).
     */
    readonly size: pulumi.Output<DatabaseSlug>;
    /**
     * A comma separated string specifying the  SQL modes for a MySQL cluster.
     */
    readonly sqlMode: pulumi.Output<string | undefined>;
    /**
     * A list of tag names to be applied to the database cluster.
     */
    readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The full URI for connecting to the database cluster.
     */
    readonly uri: pulumi.Output<string>;
    /**
     * Username for the cluster's default user.
     */
    readonly user: pulumi.Output<string>;
    /**
     * Engine version used by the cluster (ex. `11` for PostgreSQL 11).
     */
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a DatabaseCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering DatabaseCluster resources.
 */
export interface DatabaseClusterState {
    /**
     * The uniform resource name of the database cluster.
     */
    readonly clusterUrn?: pulumi.Input<string>;
    /**
     * Name of the cluster's default database.
     */
    readonly database?: pulumi.Input<string>;
    /**
     * Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
     */
    readonly engine?: pulumi.Input<string>;
    /**
     * A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
     */
    readonly evictionPolicy?: pulumi.Input<string>;
    /**
     * Database cluster's hostname.
     */
    readonly host?: pulumi.Input<string>;
    /**
     * Defines when the automatic maintenance should be performed for the database cluster.
     */
    readonly maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.DatabaseClusterMaintenanceWindow>[]>;
    /**
     * The name of the database cluster.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Number of nodes that will be included in the cluster.
     */
    readonly nodeCount?: pulumi.Input<number>;
    /**
     * Password for the cluster's default user.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * Network port that the database cluster is listening on.
     */
    readonly port?: pulumi.Input<number>;
    /**
     * Same as `host`, but only accessible from resources within the account and in the same region.
     */
    readonly privateHost?: pulumi.Input<string>;
    /**
     * The ID of the VPC where the database cluster will be located.
     */
    readonly privateNetworkUuid?: pulumi.Input<string>;
    /**
     * Same as `uri`, but only accessible from resources within the account and in the same region.
     */
    readonly privateUri?: pulumi.Input<string>;
    /**
     * DigitalOcean region where the cluster will reside.
     */
    readonly region?: pulumi.Input<Region>;
    /**
     * Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://developers.digitalocean.com/documentation/v2/#databases).
     */
    readonly size?: pulumi.Input<DatabaseSlug>;
    /**
     * A comma separated string specifying the  SQL modes for a MySQL cluster.
     */
    readonly sqlMode?: pulumi.Input<string>;
    /**
     * A list of tag names to be applied to the database cluster.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The full URI for connecting to the database cluster.
     */
    readonly uri?: pulumi.Input<string>;
    /**
     * Username for the cluster's default user.
     */
    readonly user?: pulumi.Input<string>;
    /**
     * Engine version used by the cluster (ex. `11` for PostgreSQL 11).
     */
    readonly version?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a DatabaseCluster resource.
 */
export interface DatabaseClusterArgs {
    /**
     * Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
     */
    readonly engine: pulumi.Input<string>;
    /**
     * A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
     */
    readonly evictionPolicy?: pulumi.Input<string>;
    /**
     * Defines when the automatic maintenance should be performed for the database cluster.
     */
    readonly maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.DatabaseClusterMaintenanceWindow>[]>;
    /**
     * The name of the database cluster.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Number of nodes that will be included in the cluster.
     */
    readonly nodeCount: pulumi.Input<number>;
    /**
     * The ID of the VPC where the database cluster will be located.
     */
    readonly privateNetworkUuid?: pulumi.Input<string>;
    /**
     * DigitalOcean region where the cluster will reside.
     */
    readonly region: pulumi.Input<Region>;
    /**
     * Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://developers.digitalocean.com/documentation/v2/#databases).
     */
    readonly size: pulumi.Input<DatabaseSlug>;
    /**
     * A comma separated string specifying the  SQL modes for a MySQL cluster.
     */
    readonly sqlMode?: pulumi.Input<string>;
    /**
     * A list of tag names to be applied to the database cluster.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Engine version used by the cluster (ex. `11` for PostgreSQL 11).
     */
    readonly version?: pulumi.Input<string>;
}
