"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean database cluster resource.
 *
 * ## Example Usage
 * ### Create a new PostgreSQL database cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const postgres_example = new digitalocean.DatabaseCluster("postgres-example", {
 *     engine: "pg",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 *     version: "11",
 * });
 * ```
 * ### Create a new MySQL database cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const mysql_example = new digitalocean.DatabaseCluster("mysql-example", {
 *     engine: "mysql",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 *     version: "8",
 * });
 * ```
 * ### Create a new Redis database cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const redis_example = new digitalocean.DatabaseCluster("redis-example", {
 *     engine: "redis",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 *     version: "6",
 * });
 * ```
 *
 * ## Import
 *
 * Database clusters can be imported using the `id` returned from DigitalOcean, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/databaseCluster:DatabaseCluster mycluster 245bcfd0-7f31-4ce6-a2bc-475a116cca97
 * ```
 */
class DatabaseCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["clusterUrn"] = state ? state.clusterUrn : undefined;
            inputs["database"] = state ? state.database : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            inputs["host"] = state ? state.host : undefined;
            inputs["maintenanceWindows"] = state ? state.maintenanceWindows : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nodeCount"] = state ? state.nodeCount : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["privateHost"] = state ? state.privateHost : undefined;
            inputs["privateNetworkUuid"] = state ? state.privateNetworkUuid : undefined;
            inputs["privateUri"] = state ? state.privateUri : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["sqlMode"] = state ? state.sqlMode : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uri"] = state ? state.uri : undefined;
            inputs["user"] = state ? state.user : undefined;
            inputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.engine === undefined) {
                throw new Error("Missing required property 'engine'");
            }
            if (!args || args.nodeCount === undefined) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if (!args || args.region === undefined) {
                throw new Error("Missing required property 'region'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            inputs["engine"] = args ? args.engine : undefined;
            inputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            inputs["maintenanceWindows"] = args ? args.maintenanceWindows : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nodeCount"] = args ? args.nodeCount : undefined;
            inputs["privateNetworkUuid"] = args ? args.privateNetworkUuid : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["sqlMode"] = args ? args.sqlMode : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["clusterUrn"] = undefined /*out*/;
            inputs["database"] = undefined /*out*/;
            inputs["host"] = undefined /*out*/;
            inputs["password"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["privateHost"] = undefined /*out*/;
            inputs["privateUri"] = undefined /*out*/;
            inputs["uri"] = undefined /*out*/;
            inputs["user"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DatabaseCluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DatabaseCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabaseCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DatabaseCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseCluster.__pulumiType;
    }
}
exports.DatabaseCluster = DatabaseCluster;
/** @internal */
DatabaseCluster.__pulumiType = 'digitalocean:index/databaseCluster:DatabaseCluster';
//# sourceMappingURL=databaseCluster.js.map