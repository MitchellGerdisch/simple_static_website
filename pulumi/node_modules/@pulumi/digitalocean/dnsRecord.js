"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean DNS record resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const _default = new digitalocean.Domain("default", {name: "example.com"});
 * // Add an A record to the domain for www.example.com.
 * const www = new digitalocean.DnsRecord("www", {
 *     domain: _default.name,
 *     type: "A",
 *     value: "192.168.0.11",
 * });
 * // Add a MX record for the example.com domain itself.
 * const mx = new digitalocean.DnsRecord("mx", {
 *     domain: _default.name,
 *     type: "MX",
 *     priority: 10,
 *     value: "mail.example.com.",
 * });
 * export const wwwFqdn = www.fqdn;
 * export const mxFqdn = mx.fqdn;
 * ```
 *
 * ## Import
 *
 * Records can be imported using the domain name and record `id` when joined with a comma. See the following example
 *
 * ```sh
 *  $ pulumi import digitalocean:index/dnsRecord:DnsRecord example_record example.com,12345678
 * ```
 */
class DnsRecord extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["flags"] = state ? state.flags : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["tag"] = state ? state.tag : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["value"] = state ? state.value : undefined;
            inputs["weight"] = state ? state.weight : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.domain === undefined) {
                throw new Error("Missing required property 'domain'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            if (!args || args.value === undefined) {
                throw new Error("Missing required property 'value'");
            }
            inputs["domain"] = args ? args.domain : undefined;
            inputs["flags"] = args ? args.flags : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["tag"] = args ? args.tag : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["value"] = args ? args.value : undefined;
            inputs["weight"] = args ? args.weight : undefined;
            inputs["fqdn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DnsRecord.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DnsRecord(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }
}
exports.DnsRecord = DnsRecord;
/** @internal */
DnsRecord.__pulumiType = 'digitalocean:index/dnsRecord:DnsRecord';
//# sourceMappingURL=dnsRecord.js.map