import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import { Algorithm, Region } from "./index";
/**
 * Provides a DigitalOcean Load Balancer resource. This can be used to create,
 * modify, and delete Load Balancers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const web = new digitalocean.Droplet("web", {
 *     size: "s-1vcpu-1gb",
 *     image: "ubuntu-18-04-x64",
 *     region: "nyc3",
 * });
 * const _public = new digitalocean.LoadBalancer("public", {
 *     region: "nyc3",
 *     forwardingRules: [{
 *         entryPort: 80,
 *         entryProtocol: "http",
 *         targetPort: 80,
 *         targetProtocol: "http",
 *     }],
 *     healthcheck: {
 *         port: 22,
 *         protocol: "tcp",
 *     },
 *     dropletIds: [web.id],
 * });
 * ```
 *
 * When managing certificates attached to the load balancer, make sure to add the `createBeforeDestroy`
 * lifecycle property in order to ensure the certificate is correctly updated when changed. The order of
 * operations will then be: `Create new certificate` > `Update loadbalancer with new certificate` ->
 * `Delete old certificate`. When doing so, you must also change the name of the certificate,
 * as there cannot be multiple certificates with the same name in an account.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const cert = new digitalocean.Certificate("cert", {
 *     privateKey: "file('key.pem')",
 *     leafCertificate: "file('cert.pem')",
 * });
 * const web = new digitalocean.Droplet("web", {
 *     size: "s-1vcpu-1gb",
 *     image: "ubuntu-18-04-x64",
 *     region: "nyc3",
 * });
 * const _public = new digitalocean.LoadBalancer("public", {
 *     region: "nyc3",
 *     forwardingRules: [{
 *         entryPort: 443,
 *         entryProtocol: "https",
 *         targetPort: 80,
 *         targetProtocol: "http",
 *         certificateName: cert.name,
 *     }],
 *     healthcheck: {
 *         port: 22,
 *         protocol: "tcp",
 *     },
 *     dropletIds: [web.id],
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancers can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/loadBalancer:LoadBalancer myloadbalancer 4de7ac8b-495b-4884-9a69-1050c6793cd6
 * ```
 */
export declare class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer;
    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LoadBalancer;
    /**
     * The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `roundRobin`
     * or `leastConnections`. The default value is `roundRobin`.
     */
    readonly algorithm: pulumi.Output<Algorithm | undefined>;
    /**
     * A list of the IDs of each droplet to be attached to the Load Balancer.
     */
    readonly dropletIds: pulumi.Output<number[]>;
    /**
     * The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     */
    readonly dropletTag: pulumi.Output<string | undefined>;
    /**
     * A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets. Default value is `false`.
     */
    readonly enableBackendKeepalive: pulumi.Output<boolean | undefined>;
    /**
     * A boolean value indicating whether PROXY
     * Protocol should be used to pass information from connecting client requests to
     * the backend service. Default value is `false`.
     */
    readonly enableProxyProtocol: pulumi.Output<boolean | undefined>;
    /**
     * A list of `forwardingRule` to be assigned to the
     * Load Balancer. The `forwardingRule` block is documented below.
     */
    readonly forwardingRules: pulumi.Output<outputs.LoadBalancerForwardingRule[]>;
    /**
     * A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     */
    readonly healthcheck: pulumi.Output<outputs.LoadBalancerHealthcheck>;
    readonly ip: pulumi.Output<string>;
    /**
     * The uniform resource name for the Load Balancer
     */
    readonly loadBalancerUrn: pulumi.Output<string>;
    /**
     * The Load Balancer name
     */
    readonly name: pulumi.Output<string>;
    /**
     * A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     */
    readonly redirectHttpToHttps: pulumi.Output<boolean | undefined>;
    /**
     * The region to start in
     */
    readonly region: pulumi.Output<Region>;
    /**
     * The size of the Load Balancer. It must be either `lb-small`, `lb-medium`, or `lb-large`. Defaults to `lb-small`.
     */
    readonly size: pulumi.Output<string | undefined>;
    readonly status: pulumi.Output<string>;
    /**
     * A `stickySessions` block to be assigned to the
     * Load Balancer. The `stickySessions` block is documented below. Only 1 stickySessions block is allowed.
     */
    readonly stickySessions: pulumi.Output<outputs.LoadBalancerStickySessions>;
    /**
     * The ID of the VPC where the load balancer will be located.
     */
    readonly vpcUuid: pulumi.Output<string>;
    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `roundRobin`
     * or `leastConnections`. The default value is `roundRobin`.
     */
    readonly algorithm?: pulumi.Input<Algorithm>;
    /**
     * A list of the IDs of each droplet to be attached to the Load Balancer.
     */
    readonly dropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     */
    readonly dropletTag?: pulumi.Input<string>;
    /**
     * A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets. Default value is `false`.
     */
    readonly enableBackendKeepalive?: pulumi.Input<boolean>;
    /**
     * A boolean value indicating whether PROXY
     * Protocol should be used to pass information from connecting client requests to
     * the backend service. Default value is `false`.
     */
    readonly enableProxyProtocol?: pulumi.Input<boolean>;
    /**
     * A list of `forwardingRule` to be assigned to the
     * Load Balancer. The `forwardingRule` block is documented below.
     */
    readonly forwardingRules?: pulumi.Input<pulumi.Input<inputs.LoadBalancerForwardingRule>[]>;
    /**
     * A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     */
    readonly healthcheck?: pulumi.Input<inputs.LoadBalancerHealthcheck>;
    readonly ip?: pulumi.Input<string>;
    /**
     * The uniform resource name for the Load Balancer
     */
    readonly loadBalancerUrn?: pulumi.Input<string>;
    /**
     * The Load Balancer name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     */
    readonly redirectHttpToHttps?: pulumi.Input<boolean>;
    /**
     * The region to start in
     */
    readonly region?: pulumi.Input<Region>;
    /**
     * The size of the Load Balancer. It must be either `lb-small`, `lb-medium`, or `lb-large`. Defaults to `lb-small`.
     */
    readonly size?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    /**
     * A `stickySessions` block to be assigned to the
     * Load Balancer. The `stickySessions` block is documented below. Only 1 stickySessions block is allowed.
     */
    readonly stickySessions?: pulumi.Input<inputs.LoadBalancerStickySessions>;
    /**
     * The ID of the VPC where the load balancer will be located.
     */
    readonly vpcUuid?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `roundRobin`
     * or `leastConnections`. The default value is `roundRobin`.
     */
    readonly algorithm?: pulumi.Input<Algorithm>;
    /**
     * A list of the IDs of each droplet to be attached to the Load Balancer.
     */
    readonly dropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     */
    readonly dropletTag?: pulumi.Input<string>;
    /**
     * A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets. Default value is `false`.
     */
    readonly enableBackendKeepalive?: pulumi.Input<boolean>;
    /**
     * A boolean value indicating whether PROXY
     * Protocol should be used to pass information from connecting client requests to
     * the backend service. Default value is `false`.
     */
    readonly enableProxyProtocol?: pulumi.Input<boolean>;
    /**
     * A list of `forwardingRule` to be assigned to the
     * Load Balancer. The `forwardingRule` block is documented below.
     */
    readonly forwardingRules: pulumi.Input<pulumi.Input<inputs.LoadBalancerForwardingRule>[]>;
    /**
     * A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     */
    readonly healthcheck?: pulumi.Input<inputs.LoadBalancerHealthcheck>;
    /**
     * The Load Balancer name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     */
    readonly redirectHttpToHttps?: pulumi.Input<boolean>;
    /**
     * The region to start in
     */
    readonly region: pulumi.Input<Region>;
    /**
     * The size of the Load Balancer. It must be either `lb-small`, `lb-medium`, or `lb-large`. Defaults to `lb-small`.
     */
    readonly size?: pulumi.Input<string>;
    /**
     * A `stickySessions` block to be assigned to the
     * Load Balancer. The `stickySessions` block is documented below. Only 1 stickySessions block is allowed.
     */
    readonly stickySessions?: pulumi.Input<inputs.LoadBalancerStickySessions>;
    /**
     * The ID of the VPC where the load balancer will be located.
     */
    readonly vpcUuid?: pulumi.Input<string>;
}
