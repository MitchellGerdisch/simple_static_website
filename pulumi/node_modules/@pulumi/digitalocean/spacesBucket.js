"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a bucket resource for Spaces, DigitalOcean's object storage product.
 *
 * The [Spaces API](https://developers.digitalocean.com/documentation/spaces/) was
 * designed to be interoperable with Amazon's AWS S3 API. This allows users to
 * interact with the service while using the tools they already know. Spaces
 * mirrors S3's authentication framework and requests to Spaces require a key pair
 * similar to Amazon's Access ID and Secret Key.
 *
 * The authentication requirement can be met by either setting the
 * `SPACES_ACCESS_KEY_ID` and `SPACES_SECRET_ACCESS_KEY` environment variables or
 * the provider's `spacesAccessId` and `spacesSecretKey` arguments to the
 * access ID and secret you generate via the DigitalOcean control panel. For
 * example:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const static_assets = new digitalocean.SpacesBucket("static-assets", {});
 * // ...
 * ```
 *
 * For more information, See [An Introduction to DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces)
 *
 * ## Example Usage
 * ### Create a New Bucket
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const foobar = new digitalocean.SpacesBucket("foobar", {
 *     region: "nyc3",
 * });
 * ```
 * ### Create a New Bucket With CORS Rules
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const foobar = new digitalocean.SpacesBucket("foobar", {
 *     corsRules: [
 *         {
 *             allowedHeaders: ["*"],
 *             allowedMethods: ["GET"],
 *             allowedOrigins: ["*"],
 *             maxAgeSeconds: 3000,
 *         },
 *         {
 *             allowedHeaders: ["*"],
 *             allowedMethods: [
 *                 "PUT",
 *                 "POST",
 *                 "DELETE",
 *             ],
 *             allowedOrigins: ["https://www.example.com"],
 *             maxAgeSeconds: 3000,
 *         },
 *     ],
 *     region: "nyc3",
 * });
 * ```
 *
 * ## Import
 *
 * Buckets can be imported using the `region` and `name` attributes (delimited by a comma)
 *
 * ```sh
 *  $ pulumi import digitalocean:index/spacesBucket:SpacesBucket foobar `region`,`name`
 * ```
 */
class SpacesBucket extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["acl"] = state ? state.acl : undefined;
            inputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            inputs["bucketUrn"] = state ? state.bucketUrn : undefined;
            inputs["corsRules"] = state ? state.corsRules : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["versioning"] = state ? state.versioning : undefined;
        }
        else {
            const args = argsOrState;
            inputs["acl"] = args ? args.acl : undefined;
            inputs["corsRules"] = args ? args.corsRules : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["versioning"] = args ? args.versioning : undefined;
            inputs["bucketDomainName"] = undefined /*out*/;
            inputs["bucketUrn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SpacesBucket.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SpacesBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SpacesBucket(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SpacesBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpacesBucket.__pulumiType;
    }
}
exports.SpacesBucket = SpacesBucket;
/** @internal */
SpacesBucket.__pulumiType = 'digitalocean:index/spacesBucket:SpacesBucket';
//# sourceMappingURL=spacesBucket.js.map